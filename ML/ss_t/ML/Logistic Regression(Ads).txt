
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np


df = pd.read_csv('Social_Network_Ads.csv')


print(df.head())




label_encoder = LabelEncoder()
df['Gender'] = label_encoder.fit_transform(df['Gender'])  


X = df[['Age', 'Gender']]  
y = df['Purchased'] 


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

logistic_regression = LogisticRegression()

logistic_regression.fit(X_train_scaled, y_train)

def predict_purchase():
    age = float(input("Enter Age: "))
    gender = input("Enter Gender (Male/Female): ")

   
    gender_encoded = 1 if gender.lower() == 'male' else 0


    user_input = np.array([[age, gender_encoded]])

    user_input_scaled = scaler.transform(user_input)


    prediction = logistic_regression.predict(user_input_scaled)


    if prediction[0] == 1:
        print("Prediction: The person is likely to purchase the item.")
    else:
        print("Prediction: The person is not likely to purchase the item.")


predict_purchase()


y_prob = logistic_regression.predict_proba(X_test_scaled)[:, 1]  
y_pred = logistic_regression.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_prob)
mae = mean_absolute_error(y_test, y_prob)
r2 = r2_score(y_test, y_prob)


print(f"\nMSE (Mean Squared Error): {mse:.4f}")
print(f"MAE (Mean Absolute Error): {mae:.4f}")
print(f"R-squared (Coefficient of Determination): {r2:.4f}")


accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")
