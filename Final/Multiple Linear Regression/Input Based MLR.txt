import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score


# Load dataset
df = pd.read_csv('CarPrice_Assignment.csv')


# Handle categorical variables with one-hot encoding
categorical_columns = df.select_dtypes(include=['object', 'category']).columns
df_encoded = pd.get_dummies(df, columns=categorical_columns)


# Split data into features (X) and target (y)
X = df_encoded.drop('price', axis=1)  # Feature matrix
y = df_encoded['price']  # Target vector


# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Train linear regression model
regressor = LinearRegression()
regressor.fit(X_train, y_train)


# Evaluate the model
y_pred = regressor.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"Mean Absolute Error (MAE): {mae}")
print(f"R-squared (R^2): {r2}")


# Function to take input and predict price
def predict_car_price():
    try:
        # Example input: You can ask users to input different car features.
        # The user should provide input based on the expected columns (after encoding).
        car_features = {
            'symboling': float(input("Enter symboling: ")),
            'wheelbase': float(input("Enter wheelbase: ")),
            'carlength': float(input("Enter carlength: ")),
            'carwidth': float(input("Enter carwidth: ")),
            'carheight': float(input("Enter carheight: ")),
            'curbweight': float(input("Enter curbweight: ")),
            'enginesize': float(input("Enter enginesize: ")),
            'boreratio': float(input("Enter boreratio: ")),
            'stroke': float(input("Enter stroke: ")),
            'compressionratio': float(input("Enter compressionratio: ")),
            'horsepower': float(input("Enter horsepower: ")),
            'peakrpm': float(input("Enter peakrpm: ")),
            'citympg': float(input("Enter citympg: ")),
            'highwaympg': float(input("Enter highwaympg: "))
        }

        # Create a dataframe for the input to match the training data
        car_df = pd.DataFrame([car_features])

        # Encode categorical features (if any), matching the model's training columns
        car_encoded = pd.get_dummies(car_df)
        
        # Align the input with the model's feature columns
        car_encoded = car_encoded.reindex(columns=X.columns, fill_value=0)

        # Predict the price using the trained model
        price_pred = regressor.predict(car_encoded)
        print(f"Predicted Car Price: ${price_pred[0]:.2f}")

    except ValueError:
        print("Invalid input, please enter numeric values for the car features.")

# Call the function to predict price based on user input
predict_car_price()
