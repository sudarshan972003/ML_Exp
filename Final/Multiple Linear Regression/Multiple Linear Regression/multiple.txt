import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sn
from sklearn.metrics import r2_score

df = pd.read_csv('adm_data.csv')
df = pd.get_dummies(df, drop_first=True)
print(df)

print("Column Names:", df.columns)  #bcz in csv file column heading space​

X = df.drop(columns=['Chance of Admit ', 'Serial No.'])
y = df['Chance of Admit ']
print(X)
print(y)

column_means = X.mean()
X = X.fillna(column_means)

df['GRE Score']=df['GRE Score'].replace( 'NaN',df['GRE Score'].mean())
df['TOEFL Score']=df['TOEFL Score'].replace('NaN',df['TOEFL Score'].mean())
df['University Rating']=df['University Rating'].replace('NaN',df['University Rating'].mean())

# plotting correlation heatmap​

dataplot = sn.heatmap(df.corr(), cmap="YlGnBu", annot=True)
X = df.drop(columns=['TOEFL Score', 'GRE Score', 'Chance of Admit ', 'Serial No.'])
print(X.head(25))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print(X_test)
print(y_pred)

data = {
    'University Rating': [4.000000, 4.000000],
    'SOP': [4.0, 4.5],
    'LOR ': [3.5, 4.0],
    'CGPA': [9.54, 9.04],
    'Research': [1, 1]
}

testing_df = pd.DataFrame(data)
print(testing_df)
pred = model.predict(testing_df)
print(pred)
print(y_train)
print(X_train.shape, y_train.shape)

# Plot the actual vs. predicted values for training data​

plt.figure(figsize=(8, 5))
plt.scatter(model.predict(X_train), y_train, color='blue', label='Training Data')
plt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='red', linestyle='--')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Multiple Linear Regression - Training Data')
plt.legend()
plt.show()