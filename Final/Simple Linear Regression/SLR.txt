import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, r2_score, mean_squared_error
import matplotlib.pyplot as plt

# Given data
x = np.array([1, 5, 4, 8, 8]).reshape(-1, 1)  # Reshaping for sklearn
y = np.array([8, 9, 4, 8, 4])

# Create and train the model
model = LinearRegression()
model.fit(x, y)

# Make predictions
y_pred = model.predict(x)

# Convert regression results to binary classification
threshold = 6  # Example threshold
y_class_true = (y >= threshold).astype(int)  # True classes based on the threshold
y_class_pred = (y_pred >= threshold).astype(int)  # Predicted classes based on the threshold

# Compute regression evaluation metrics
mse = mean_squared_error(y, y_pred)
r2 = r2_score(y, y_pred)

print(f"Mean Squared Error (MSE): {mse}")
print(f"RÂ² score: {r2}")

# Compute classification metrics
accuracy = accuracy_score(y_class_true, y_class_pred)
precision = precision_score(y_class_true, y_class_pred)
recall = recall_score(y_class_true, y_class_pred)
conf_matrix = confusion_matrix(y_class_true, y_class_pred)

print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"Confusion Matrix:\n{conf_matrix}")

# Plotting the regression line and the actual data points
plt.scatter(x, y, color='blue')  # Original data points
plt.plot(x, y_pred, color='red')  # Regression line
plt.xlabel('x')
plt.ylabel('y')
plt.title('Simple Linear Regression')
plt.show()